// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.22.3
// source: dandelion/core.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Attestation_Privacy int32

const (
	// EYES_ONLY indicates the attestor's desire that only the recipients
	// chosen by the attestor may see it, and that no such recipient should
	// forward it any further.
	Attestation_EYES_ONLY Attestation_Privacy = 0
	// AS_NEEDED indicates the attestor's desire to keep the attestation
	// private to a small group.  The intended small group is normally inferred
	// from the context of which entity made the attestation.
	Attestation_AS_NEEDED Attestation_Privacy = 1
	// UNLISTED indicates the attestor's permission to share the attestation
	// with any entity that is already "in the know" in some sense.  For
	// example, if the attestor is a node and the attestation is an UNLISTED
	// share of the node's public IP address and port, then anyone who already
	// knows the node's public key has permission to see the full attestation.
	Attestation_UNLISTED Attestation_Privacy = 2
	// PUBLISHED indicates that everything in the attestation is public
	// knowledge, and it may be freely shared with anyone who is curious about
	// such things.  (Even search engines.)
	Attestation_PUBLISHED Attestation_Privacy = 3
)

// Enum value maps for Attestation_Privacy.
var (
	Attestation_Privacy_name = map[int32]string{
		0: "EYES_ONLY",
		1: "AS_NEEDED",
		2: "UNLISTED",
		3: "PUBLISHED",
	}
	Attestation_Privacy_value = map[string]int32{
		"EYES_ONLY": 0,
		"AS_NEEDED": 1,
		"UNLISTED":  2,
		"PUBLISHED": 3,
	}
)

func (x Attestation_Privacy) Enum() *Attestation_Privacy {
	p := new(Attestation_Privacy)
	*p = x
	return p
}

func (x Attestation_Privacy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Attestation_Privacy) Descriptor() protoreflect.EnumDescriptor {
	return file_dandelion_core_proto_enumTypes[0].Descriptor()
}

func (Attestation_Privacy) Type() protoreflect.EnumType {
	return &file_dandelion_core_proto_enumTypes[0]
}

func (x Attestation_Privacy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Attestation_Privacy.Descriptor instead.
func (Attestation_Privacy) EnumDescriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{6, 0}
}

// Identity is the minimal information needed to identify a specific entity on
// the Dandelion mesh network.
//
// Entities may rotate their keys via SignedAttestation messages, so they are
// expected to have multiple identities over time.  Entities may also construct
// limited-use pseudonymous identities as desired, but such pseudonyms do not
// receive the benefit of any existing trust relationships that the entity may
// have, and message routing to pseudonyms through the mesh will tend to be
// slower and lossier.
type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SignPublicKey is the entity's public key for libsodium crypto_sign.  It is
	// an Ed25519 public key, which is exactly 32 bytes long.
	SignPublicKey []byte `protobuf:"bytes,1,opt,name=sign_public_key,json=signPublicKey,proto3" json:"sign_public_key,omitempty"`
	// BoxPublicKey is the entity's public key for libsodium crypto_box_seal.  It
	// is an X25519 public key, which is exactly 32 bytes long.
	BoxPublicKey []byte `protobuf:"bytes,2,opt,name=box_public_key,json=boxPublicKey,proto3" json:"box_public_key,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dandelion_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_dandelion_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{0}
}

func (x *Identity) GetSignPublicKey() []byte {
	if x != nil {
		return x.SignPublicKey
	}
	return nil
}

func (x *Identity) GetBoxPublicKey() []byte {
	if x != nil {
		return x.BoxPublicKey
	}
	return nil
}

// SealedEnvelope is the basic unit of node-to-node communication over the Dandelion
// mesh network.
type SealedEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recipient is the envelope's intended recipient.
	Recipient *Identity `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// Contents is a libsodium "sealed box" which contains a single
	// dandelion.Envelope protobuf message in binary serialization format.  The
	// public key used to seal the box is Recipient.BoxPublicKey.
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *SealedEnvelope) Reset() {
	*x = SealedEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dandelion_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealedEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealedEnvelope) ProtoMessage() {}

func (x *SealedEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_dandelion_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealedEnvelope.ProtoReflect.Descriptor instead.
func (*SealedEnvelope) Descriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{1}
}

func (x *SealedEnvelope) GetRecipient() *Identity {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *SealedEnvelope) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

// Envelope is a collection of SignedLetter and SignedAttestation messages.
// Envelope messages are most commonly found sealed inside of SealedEnvelope
// messages.
type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Items holds any number of Item messages.  The order is not meaningful.
	Items []*Envelope_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dandelion_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_dandelion_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{2}
}

func (x *Envelope) GetItems() []*Envelope_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// SignedLetter is a Letter message with an attached signature.
type SignedLetter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sender is the Letter's sender.
	Sender *Identity `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Signature is the libsodium signature resulting from calling
	// crypto_sign_detached using the sender's private key on the byte string
	// created by concatenating the following pieces:
	//
	//   - the ASCII string "dandelion-letter-v1"
	//   - the byte 0xff
	//   - Recipient.SignPublicKey (from SealedEnvelope or context)
	//   - Recipient.BoxPublicKey (from SealedEnvelope or context)
	//   - Sender.SignPublicKey
	//   - Sender.BoxPublicKey
	//   - Contents
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Contents is a single dandelion.Letter protobuf message in binary
	// serialization format.
	Contents []byte `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *SignedLetter) Reset() {
	*x = SignedLetter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dandelion_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedLetter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedLetter) ProtoMessage() {}

func (x *SignedLetter) ProtoReflect() protoreflect.Message {
	mi := &file_dandelion_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedLetter.ProtoReflect.Descriptor instead.
func (*SignedLetter) Descriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{3}
}

func (x *SignedLetter) GetSender() *Identity {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *SignedLetter) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedLetter) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

// Letter is a message from a specific sender to a specific recipient, found
// inside of a SignedLetter.
type Letter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parts holds the protobuf messages being sent as the body of this letter.
	//
	// Most body parts live in the "dandelion.letters" package.  However, other
	// protobuf messages may be sent as letter bodies, so long as both ends agree
	// on the semantics of a given protobuf message when used as a letter body.
	Parts []*anypb.Any `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
	// SentAt holds the time at which this letter was sent.
	SentAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`
}

func (x *Letter) Reset() {
	*x = Letter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dandelion_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Letter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Letter) ProtoMessage() {}

func (x *Letter) ProtoReflect() protoreflect.Message {
	mi := &file_dandelion_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Letter.ProtoReflect.Descriptor instead.
func (*Letter) Descriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{4}
}

func (x *Letter) GetParts() []*anypb.Any {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *Letter) GetSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

// SignedAttestation is an Attestation message with an attached signature.
type SignedAttestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attestor is the entity making this attestation.
	Attestor *Identity `protobuf:"bytes,1,opt,name=attestor,proto3" json:"attestor,omitempty"`
	// Signature is the libsodium signature resulting from calling
	// crypto_sign_detached using the attestor's private key on the byte string
	// created by concatenating the following pieces:
	//
	//   - the ASCII string "dandelion-attestation-v1"
	//   - the byte 0xff
	//   - Attestor.SignPublicKey
	//   - Attestor.BoxPublicKey
	//   - Contents
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Contents is a single dandelion.Attestation protobuf message in binary
	// serialization format.
	Contents []byte `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *SignedAttestation) Reset() {
	*x = SignedAttestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dandelion_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedAttestation) ProtoMessage() {}

func (x *SignedAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_dandelion_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedAttestation.ProtoReflect.Descriptor instead.
func (*SignedAttestation) Descriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{5}
}

func (x *SignedAttestation) GetAttestor() *Identity {
	if x != nil {
		return x.Attestor
	}
	return nil
}

func (x *SignedAttestation) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedAttestation) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

// Attestation is a sworn statement by an attestor that certain facts were
// known or believed to be true at the time of the attestation.
//
// Attestations are meant to be forwarded through the mesh network as needed,
// whereas Letters are meant to reach a specific recipient.
type Attestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Claims holds the specific claims being made in this attestation.
	//
	// Most claims live in the "dandelion.claims" package.  However, other
	// protobuf messages may be sent as claims, so long as both ends agree on the
	// semantics of a given protobuf message when used as a claim.
	//
	// An attestation may contain an arbitrary number of claims, but attestors
	// should put unrelated claims in separate SignedAttestation messages so that
	// verifiers can share them independently.
	Claims []*anypb.Any `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty"`
	// AttestedAt indicates the time at which the attestation was made.
	AttestedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=attested_at,json=attestedAt,proto3" json:"attested_at,omitempty"`
	// SerialNumber indicates the serial number of the attestation.  It must be
	// non-zero, and the attestor must ensure that all serial numbers made with
	// the same Identity are monotonically increasing within the epoch defined by
	// that Identity's lifespan.
	SerialNumber uint64 `protobuf:"varint,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Privacy expresses the attestor's wishes for privacy of this attestation.
	Privacy Attestation_Privacy `protobuf:"varint,4,opt,name=privacy,proto3,enum=dandelion.Attestation_Privacy" json:"privacy,omitempty"`
}

func (x *Attestation) Reset() {
	*x = Attestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dandelion_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attestation) ProtoMessage() {}

func (x *Attestation) ProtoReflect() protoreflect.Message {
	mi := &file_dandelion_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attestation.ProtoReflect.Descriptor instead.
func (*Attestation) Descriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{6}
}

func (x *Attestation) GetClaims() []*anypb.Any {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *Attestation) GetAttestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AttestedAt
	}
	return nil
}

func (x *Attestation) GetSerialNumber() uint64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *Attestation) GetPrivacy() Attestation_Privacy {
	if x != nil {
		return x.Privacy
	}
	return Attestation_EYES_ONLY
}

type InternetAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *InternetAddress) Reset() {
	*x = InternetAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dandelion_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternetAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternetAddress) ProtoMessage() {}

func (x *InternetAddress) ProtoReflect() protoreflect.Message {
	mi := &file_dandelion_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternetAddress.ProtoReflect.Descriptor instead.
func (*InternetAddress) Descriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{7}
}

func (x *InternetAddress) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *InternetAddress) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Address:
	//
	//	*Address_Internet
	Address isAddress_Address `protobuf_oneof:"address"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dandelion_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_dandelion_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{8}
}

func (m *Address) GetAddress() isAddress_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (x *Address) GetInternet() *InternetAddress {
	if x, ok := x.GetAddress().(*Address_Internet); ok {
		return x.Internet
	}
	return nil
}

type isAddress_Address interface {
	isAddress_Address()
}

type Address_Internet struct {
	Internet *InternetAddress `protobuf:"bytes,1,opt,name=internet,proto3,oneof"`
}

func (*Address_Internet) isAddress_Address() {}

type Envelope_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*Envelope_Item_Padding
	//	*Envelope_Item_Letter
	//	*Envelope_Item_Attestation
	Payload isEnvelope_Item_Payload `protobuf_oneof:"payload"`
}

func (x *Envelope_Item) Reset() {
	*x = Envelope_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dandelion_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope_Item) ProtoMessage() {}

func (x *Envelope_Item) ProtoReflect() protoreflect.Message {
	mi := &file_dandelion_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope_Item.ProtoReflect.Descriptor instead.
func (*Envelope_Item) Descriptor() ([]byte, []int) {
	return file_dandelion_core_proto_rawDescGZIP(), []int{2, 0}
}

func (m *Envelope_Item) GetPayload() isEnvelope_Item_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Envelope_Item) GetPadding() []byte {
	if x, ok := x.GetPayload().(*Envelope_Item_Padding); ok {
		return x.Padding
	}
	return nil
}

func (x *Envelope_Item) GetLetter() *SignedLetter {
	if x, ok := x.GetPayload().(*Envelope_Item_Letter); ok {
		return x.Letter
	}
	return nil
}

func (x *Envelope_Item) GetAttestation() *SignedAttestation {
	if x, ok := x.GetPayload().(*Envelope_Item_Attestation); ok {
		return x.Attestation
	}
	return nil
}

type isEnvelope_Item_Payload interface {
	isEnvelope_Item_Payload()
}

type Envelope_Item_Padding struct {
	// Padding may be safely ignored by the recipient.
	//
	// Padding bytes are primarily used to obscure how much information is
	// actually contained in a SealedEnvelope, thwarting traffic analysis.
	//
	// Padding bytes may also be used to obscure the offset at which the
	// other items begin or end, thwarting known plaintext attacks in the
	// case that the other items in the envelope are somewhat predictable in
	// byte offset and content.  (No such attacks are known for the specific
	// algorithm used by libsodium's "sealed box" feature, assuming that
	// nonces are never used twice.  However, the fact that such attacks are
	// not known today does not mean they will never exist in the future, and
	// the sufficiently paranoid will wish to consider this.)
	Padding []byte `protobuf:"bytes,1,opt,name=padding,proto3,oneof"`
}

type Envelope_Item_Letter struct {
	// Letter holds a letter being delivered to the recipient.
	Letter *SignedLetter `protobuf:"bytes,2,opt,name=letter,proto3,oneof"`
}

type Envelope_Item_Attestation struct {
	// Attestation holds an additional attestation which might be relevant to the recipient.
	Attestation *SignedAttestation `protobuf:"bytes,3,opt,name=attestation,proto3,oneof"`
}

func (*Envelope_Item_Padding) isEnvelope_Item_Payload() {}

func (*Envelope_Item_Letter) isEnvelope_Item_Payload() {}

func (*Envelope_Item_Attestation) isEnvelope_Item_Payload() {}

var File_dandelion_core_proto protoreflect.FileDescriptor

var file_dandelion_core_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x6f,
	0x6e, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a,
	0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f, 0x78, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x6f, 0x78, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x5f, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x6c, 0x65,
	0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x61, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xa2, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a,
	0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6e,
	0x64, 0x65, 0x6c, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x75, 0x0a, 0x0c, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6e,
	0x64, 0x65, 0x6c, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x69, 0x0a, 0x06, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x22, 0x7e, 0x0a, 0x11,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9d, 0x02, 0x0a,
	0x0b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x64, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x22, 0x44, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x59, 0x45, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x22, 0x35, 0x0a, 0x0f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x4e, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x73, 0x2d, 0x74, 0x61, 0x63, 0x68, 0x79, 0x6f,
	0x6e, 0x2f, 0x64, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dandelion_core_proto_rawDescOnce sync.Once
	file_dandelion_core_proto_rawDescData = file_dandelion_core_proto_rawDesc
)

func file_dandelion_core_proto_rawDescGZIP() []byte {
	file_dandelion_core_proto_rawDescOnce.Do(func() {
		file_dandelion_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_dandelion_core_proto_rawDescData)
	})
	return file_dandelion_core_proto_rawDescData
}

var file_dandelion_core_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dandelion_core_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_dandelion_core_proto_goTypes = []interface{}{
	(Attestation_Privacy)(0),      // 0: dandelion.Attestation.Privacy
	(*Identity)(nil),              // 1: dandelion.Identity
	(*SealedEnvelope)(nil),        // 2: dandelion.SealedEnvelope
	(*Envelope)(nil),              // 3: dandelion.Envelope
	(*SignedLetter)(nil),          // 4: dandelion.SignedLetter
	(*Letter)(nil),                // 5: dandelion.Letter
	(*SignedAttestation)(nil),     // 6: dandelion.SignedAttestation
	(*Attestation)(nil),           // 7: dandelion.Attestation
	(*InternetAddress)(nil),       // 8: dandelion.InternetAddress
	(*Address)(nil),               // 9: dandelion.Address
	(*Envelope_Item)(nil),         // 10: dandelion.Envelope.Item
	(*anypb.Any)(nil),             // 11: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_dandelion_core_proto_depIdxs = []int32{
	1,  // 0: dandelion.SealedEnvelope.recipient:type_name -> dandelion.Identity
	10, // 1: dandelion.Envelope.items:type_name -> dandelion.Envelope.Item
	1,  // 2: dandelion.SignedLetter.sender:type_name -> dandelion.Identity
	11, // 3: dandelion.Letter.parts:type_name -> google.protobuf.Any
	12, // 4: dandelion.Letter.sent_at:type_name -> google.protobuf.Timestamp
	1,  // 5: dandelion.SignedAttestation.attestor:type_name -> dandelion.Identity
	11, // 6: dandelion.Attestation.claims:type_name -> google.protobuf.Any
	12, // 7: dandelion.Attestation.attested_at:type_name -> google.protobuf.Timestamp
	0,  // 8: dandelion.Attestation.privacy:type_name -> dandelion.Attestation.Privacy
	8,  // 9: dandelion.Address.internet:type_name -> dandelion.InternetAddress
	4,  // 10: dandelion.Envelope.Item.letter:type_name -> dandelion.SignedLetter
	6,  // 11: dandelion.Envelope.Item.attestation:type_name -> dandelion.SignedAttestation
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_dandelion_core_proto_init() }
func file_dandelion_core_proto_init() {
	if File_dandelion_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dandelion_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dandelion_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealedEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dandelion_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dandelion_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedLetter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dandelion_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Letter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dandelion_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedAttestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dandelion_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dandelion_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternetAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dandelion_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dandelion_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dandelion_core_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Address_Internet)(nil),
	}
	file_dandelion_core_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Envelope_Item_Padding)(nil),
		(*Envelope_Item_Letter)(nil),
		(*Envelope_Item_Attestation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dandelion_core_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dandelion_core_proto_goTypes,
		DependencyIndexes: file_dandelion_core_proto_depIdxs,
		EnumInfos:         file_dandelion_core_proto_enumTypes,
		MessageInfos:      file_dandelion_core_proto_msgTypes,
	}.Build()
	File_dandelion_core_proto = out.File
	file_dandelion_core_proto_rawDesc = nil
	file_dandelion_core_proto_goTypes = nil
	file_dandelion_core_proto_depIdxs = nil
}
